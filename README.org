* Intro
  A tutorial on how to configure a nice Emacs setup for coding in
Clojure, Elisp and text editing in Org mode.

* Features
  The goals of the customization are to make coding and editing as
  fast and efficient as possible.  This is achieved by:
+ minimizing removing the fingers from the home row
+ minimizing the number of keystrokes to run common commands

Other features:
+ Vi keybindings
+ Leader key, like in Spacemacs
+ Lisp structural editing
+ Text menus with Hydra
+ Magit
+ Elisp/Clojure debugging

* Get started, packages

The first step is connecting Emacs to some package archives.  This is
where we get additional software to extend the features of Emacs.
Create the file and folder:

: ~/.emacs.d/init.el

put the following in it:

#+BEGIN_SRC elisp
;; ============= package archives ========
(require 'package)
(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)

;; ============== use package =============
(package-initialize)
(when (not package-archive-contents) (package-refresh-contents))
(if (not (package-installed-p 'use-package))
    (progn
      (package-refresh-contents) 
      (package-install 'use-package)))
(require 'use-package)
(setq use-package-always-ensure t)    ;; download packages if not already downloaded
#+END_SRC

* Evil

We need to be evil.  All seasoned programmers eventually realize the
wisdom of Vi keybindings.  With the Evil package we can have that in
Emacs too.  Unless otherwise specified, chunks of code like the
following should be added to your:

: ~/.emacs.d/init.el

file.

#+BEGIN_SRC elisp
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(use-package evil)                      ; vi like key bindings
(evil-mode 1)
#+END_SRC

That ~setq gnutls-...~ is a bug workaround.

* Color Theme

The next most important thing...turn this screen black before my eyes
bleed!

#+BEGIN_SRC elisp
(load-theme 'wombat t)                  ; color theme
#+END_SRC

Now since I'm an old man, bump that font size:

#+BEGIN_SRC elisp
(set-face-attribute 'default nil :height 140 :family "DejaVu Sans Mono") 
#+END_SRC

* Desktop Mode

Now I don't want to keep having to open this file and
~.emacs.d/init.el~ so turn on desktop mode with:

#+BEGIN_SRC elsip
(desktop-save-mode 1)
#+END_SRC

Finally a few more tweeks:

#+BEGIN_SRC elisp
  (menu-bar-mode -1)                ; turn off the menu bar, get more vertical space for coding
  (tool-bar-mode -1)                ; turn off tool bar, same reason as above
  (toggle-scroll-bar -1)            ; remove scroll bars, we'll use keys to scroll
  (setq-default truncate-lines t)   ; dont wrap long lines

(highlight-parentheses-mode 1)
(show-paren-mode 1)
(setq projectile-completion-system 'helm
      projectile-switch-project-action 'helm-projectile)  
#+END_SRC

Okay, now we are finally getting somewhere!  Restart Emacs to see your changes.

Git Tag: evil

* Leader Keys

Now to be efficient programmers we need to be able to run functions
very quickly and easily.  Leader keys were popularized by the
spacemacs customization of emacs.  The concept is to allow us to call
functions by simply hitting the spacebar when in ~normal~ mode of Vi.
Lets supercharge our spacebar now!

** winum

However we need to tell our spacebar to do something interesting.  One
thing I like to do is use the ~winum~ package.  What this allows you
to do is to hop from one window in emacs to another by just hitting
~SPC~ then the number of the window.  So lets install ~winum~:

#+BEGIN_SRC elisp
(use-package winum)                     ; switch between buffers using numbers
(winum-mode)
#+END_SRC

Restart your emacs!  Ensure you have two windows open.  Now hit ~SPC 1~, then ~SPC 2~.  You can quickly switch between windows now!

** general

Now we can use the ~general~ package to redefine the spacebar to be
our leader key.

#+BEGIN_SRC elisp
(use-package general :config (general-evil-setup t)) 
#+END_SRC

Finally configure general:

#+BEGIN_SRC elisp
(general-define-key
 :prefix "SPC"
 :states '(normal visual emacs motion)
 "" nil
 "1" 'winum-select-window-1
 "2" 'winum-select-window-2
 "3" 'winum-select-window-3
 "4" 'winum-select-window-4)
#+END_SRC

Git Tag: leader-key

What this says, is that ~SPC~ is the prefix key, it applies when we
are in the ~normal~ state (among others).  Then we have a list where
the item in quotes is the key that will be hit after ~SPC~, followed
by the command that should get run.

No need to restart, we can just evaluation that expression.  Go after
the final parenthesis of the ~general-define-key~ command, and do ~C-x
C-e~.  

* Magit

Magit lets us use git.  As programmers we need to use git, so lets
install that!

#+BEGIN_SRC elisp
(use-package magit) 			; git integration
(use-package evil-magit)                ; vi bindings for magit
#+END_SRC

Configure general to use Magit:

#+BEGIN_SRC elisp
"g" (:ignore t :wk "Magit")
"gs" (magit-status :wk "magit status")
#+END_SRC

Git Tag: magit

Restart.

Now ~SPC g s~ gets you the magit status window! :)

* Hydras

Hydras allow you to build text based menus that call functions when
you hit the corresponding key.  Again efficiently and easily calling
functions will speed you up! 

#+BEGIN_SRC elisp
(use-package hydra)                     ; hydra menus
#+END_SRC

** Buffer Hydra Menu

Lets make our first Hydra:

#+BEGIN_SRC elisp
(defhydra hydra-buffers ()
  "
^^^       BUFFERS ^^^
^ Goto  ^ ^ Save  ^ ^ Misc  ^  
^-------^ ^-------^ ^-------^
_k_ prev  _s_ this  _d_ kill
_j_ next  _a_ all    
"
  ("j" next-buffer nil)
  ("k" previous-buffer nil)

  ("s" save-buffer nil)
  ("a" (lambda () (interactive) (save-some-buffers t)) nil :exit t)
  ("d" kill-this-buffer nil)

  ("q" nil "quit" :exit t :color pink))
#+END_SRC

Lets activate this hydra with ~SPC b~.

#+BEGIN_SRC elisp
"b" (hydra-buffers/body :wk ">BUFFERS<")
#+END_SRC

: GIT TAG: hydra

* Project Management   

A couple of other packages I like are projectile and helm.  Projectile
allows you to work with git managed projects.  Lets get that now.

#+BEGIN_SRC elisp
(use-package projectile)                ; navigate git projects
(use-package helm)                      ; incremental completions and narrowing selections 
(use-package helm-projectile)           ; integrate projectile with helm 
(helm-mode 1)
(projectile-global-mode)
(helm-projectile-on)
(setq projectile-completion-system 'helm
      projectile-switch-project-action 'helm-projectile)  
#+END_SRC

So we can quickly test out commands, lets make ~SPC SPC~ a shortcut
for running ~Alt-x~.  Also add the projectile commands:

#+BEGIN_SRC elisp
(apply 'gdk 
   ...
  '(...
    "SPC" helm-M-x
    "p" (:ignore t)
    "pf" helm-projectile-find-file
    "pp" helm-projectile-switch-project
#+END_SRC

Just add the ~"SPC", "p", "pf" and "pp"~ parts, the apply part is
already in your file and the elipses, elide redundant parts.

Restart.

Try ~SPC SPC~, ~SPC p p~ and ~SPC p f~.

* Lisp Structural Editing
This one is pretty important and big, it allows us to edit elisp, or
clojure with some powerful time savers.  Install/Enable packages:

#+BEGIN_SRC elisp
(use-package lispy)                     ; structural lisp editing
(use-package evil-lispy)                ; vi bindings for lispy
#+END_SRC

Lets setup keys that only get activated when we are in the
~emacs-lisp-mode~:

#+BEGIN_SRC elisp
    ;; ================== keydefs =====================
    (apply
     'gdk :keymaps '(emacs-lisp-mode-map)
     :states '(normal visual emacs)
     '("" nil
       "i" (i-lispy :wk "insert -> lispy state")
       "o" (o-lispy :wk "open below -> lispy state")
       "O" (O-lispy :wk "open above -> lispy state")
       "a" (a-lispy :wk "append -> lispy state")
       "A" (A-lispy :wk "append line -> lispy state")
       "[" evil-lispy/enter-state-left))
#+END_SRC

now these call custom functions that I wrote in elisp, so add those
here now too:

#+BEGIN_SRC elisp
  ;; ================== my functions ================
  (defun in-special-p ()
    (and (evil-lispy-state-p)
	 (or (lispy-right-p) (lispy-left-p))))
  (defun o-lispy ()
      (interactive)
      (evil-open-below 1)
      (call-interactively #'evil-lispy-state))
  (defun O-lispy ()
      (interactive)
      (evil-open-above 1)
      (call-interactively #'evil-lispy-state))
  (defun a-lispy ()
      (interactive)
      (evil-append 1)
      (call-interactively #'evil-lispy-state))
  (defun A-lispy ()
      (interactive)
      (evil-append-line 1)
      (evil-lispy-state))
  (defun i-lispy ()
      (interactive)
      (let* ((char-at-point (char-after))
	     (char-b4-point (char-before))
	     (close-paren 41)
	     (open-paren 40))
	(if (region-active-p)
	    (lispy-tab)
	  (progn
	    (if (and char-at-point (= char-at-point open-paren))
		(if (in-special-p)
		    (special-lispy-tab)))))
	(if (not (in-special-p)) 
	    (evil-lispy-state))))
#+END_SRC

Here we override keys using lispy's mechanism:

#+BEGIN_SRC elisp
;; ============== Leader Key ===============
;; ...
(eval-after-load "lispy"
  `(progn
     (my-remove-lispy-key (kbd "C-,"))
     (my-remove-lispy-key (kbd "C-j"))
     (my-remove-lispy-key (kbd "d"))
     (my-remove-lispy-key (kbd "e"))
     (my-remove-lispy-key (kbd "g"))
     (my-remove-lispy-key (kbd "o"))
     (my-remove-lispy-key (kbd "O"))
     (lispy-define-key lispy-mode-map (kbd "o") 'o-lispy)
     (lispy-define-key lispy-mode-map (kbd "O") 'O-lispy)
     (lispy-define-key lispy-mode-map (kbd "d") 'lispy-kill-at-point)
     (lispy-define-key lispy-mode-map (kbd "x") 'collapse-expand)
     (lispy-define-key lispy-mode-map (kbd "y") 'special-lispy-new-copy)
     (lispy-define-key lispy-mode-map (kbd "p") 'special-lispy-paste)
     (lispy-define-key lispy-mode-map (kbd "P") 'evil-paste-before)
     (lispy-define-key lispy-mode-map (kbd "g") 'g-in-lispy)
     (lispy-define-key lispy-mode-map (kbd "f") 'special-lispy-flow)
     (lispy-define-key lispy-mode-map (kbd "i") 'special-lispy-tab)
     (lispy-define-key lispy-mode-map (kbd "J") 'evil-join)
     (lispy-define-key lispy-mode-map (kbd ":") 'evil-ex)
     (lispy-define-key lispy-mode-map (kbd "\"") 'evil-ex)))
#+END_SRC

and we'll need one more function

#+BEGIN_SRC elisp
;; ============== functions ================
;; ...
(defun my-remove-lispy-key (key)
  (define-key lispy-mode-map-base key nil)
  (define-key lispy-mode-map-lispy key nil)
  (define-key lispy-mode-map-oleh key nil)
  (define-key lispy-mode-map-paredit key nil)
  (define-key lispy-mode-map-special key nil))
#+END_SRC

* window management

Here is are some key defs for window management:

#+BEGIN_SRC elisp
        "w" (:ignore t)
        "wd" delete-window-balance
        "w0" delete-window-balance
        "wm" delete-other-windows
        "w1" delete-other-windows
        "wv" split-window-vertical-balance
        "w2" split-window-vertical-balance
        "w-" split-window-below-balance
        "w3" split-window-below-balance
        "w=" balance-windows
        "wt" transpose-windows
#+END_SRC

Git Tag: projectile

